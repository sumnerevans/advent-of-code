/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package d05

import java.io.BufferedReader
import java.io.File

fun doTransforms(transformSets: List<List<Pair<Pair<Long, Long>, Long>>>, seedIn: Long): Long {
    var seed = seedIn
    for (transforms in transformSets) {
        for ((transform_range, offset) in transforms) {
            if (seed >= transform_range.first &&
                            seed < transform_range.first + transform_range.second
            ) {
                seed += offset
                break
            }
        }
    }
    return seed
}

fun main() {
    val filename =
    //       "/home/sumner/projects/github.com/sumnerevans/advent-of-code/y2023/d05/05.test.1.txt"
    "/home/sumner/projects/github.com/sumnerevans/advent-of-code/y2023/d05/05.txt"
    val bufferedReader: BufferedReader = File(filename).bufferedReader()

    val seeds =
            bufferedReader.readLine().substring(7).split(" ").map { it.toLong() }.toMutableList()

    bufferedReader.readLine() // eat the first empty line

    var transformSets = mutableListOf<List<Pair<Pair<Long, Long>, Long>>>()

    while (true) {
        if (bufferedReader.readLine() == null) { // eat the map line
            break
        }

        val transforms = mutableListOf<Pair<Pair<Long, Long>, Long>>()
        while (true) {
            val line = bufferedReader.readLine()
            if (line == null || line == "") {
                break
            }
            val (dst, src, len) = line.split(" ")
            transforms.add(Pair(Pair(src.toLong(), len.toLong()), dst.toLong() - src.toLong()))
        }
        transformSets.add(transforms)
    }

    print("Part 1: ")
    println(seeds.map { doTransforms(transformSets, it) }.min())

    print("Part 2: ")
    println(
            seeds.chunked(2)
                    .map { (it[0]..(it[0] + it[1])).map { doTransforms(transformSets, it) }.min() }
                    .min()
    )
}
